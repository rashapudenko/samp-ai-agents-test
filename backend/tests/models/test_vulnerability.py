import pytest
from datetime import datetime
from pydantic import ValidationError

from app.models.vulnerability import (
    Vulnerability,
    VulnerabilityCreate,
    VulnerabilityResponse,
    QueryRequest,
    QueryResponse
)


class TestVulnerability:
    """Test cases for the Vulnerability model."""
    
    def test_vulnerability_creation_with_required_fields(self):
        """Test creating a vulnerability with only required fields."""
        vuln = Vulnerability(
            package="requests",
            severity="high",
            description="Critical security vulnerability in requests library",
            published_date="2023-01-01"
        )
        
        assert vuln.package == "requests"
        assert vuln.severity == "high"
        assert vuln.description == "Critical security vulnerability in requests library"
        assert vuln.published_date == "2023-01-01"
        assert vuln.id is not None  # UUID should be auto-generated
        assert isinstance(vuln.created_at, datetime)
        assert vuln.affected_versions is None
        assert vuln.remediation is None
    
    def test_vulnerability_creation_with_all_fields(self):
        """Test creating a vulnerability with all fields."""
        vuln = Vulnerability(
            id="test-123",
            package="requests",
            severity="high",
            description="Critical security vulnerability in requests library",
            published_date="2023-01-01",
            affected_versions=">=2.0.0,<2.28.0",
            remediation="Update to version 2.28.0 or later"
        )
        
        assert vuln.id == "test-123"
        assert vuln.package == "requests"
        assert vuln.severity == "high"
        assert vuln.description == "Critical security vulnerability in requests library"
        assert vuln.published_date == "2023-01-01"
        assert vuln.affected_versions == ">=2.0.0,<2.28.0"
        assert vuln.remediation == "Update to version 2.28.0 or later"
    
    def test_vulnerability_from_dict(self):
        """Test creating vulnerability from dictionary."""
        data = {
            "package": "django",
            "severity": "medium",
            "description": "SQL injection vulnerability",
            "published_date": "2023-02-01",
            "affected_versions": ">=1.0.0,<3.2.0"
        }
        
        vuln = Vulnerability.from_dict(data)
        assert vuln.package == "django"
        assert vuln.severity == "medium"
        assert vuln.description == "SQL injection vulnerability"
    
    def test_vulnerability_missing_required_field(self):
        """Test that missing required fields raise validation error."""
        with pytest.raises(ValidationError):
            Vulnerability(
                package="requests",
                severity="high"
                # Missing description and published_date
            )


class TestVulnerabilityCreate:
    """Test cases for the VulnerabilityCreate model."""
    
    def test_vulnerability_create_valid(self):
        """Test creating VulnerabilityCreate with valid data."""
        vuln_create = VulnerabilityCreate(
            package="flask",
            severity="low",
            description="Information disclosure vulnerability",
            published_date="2023-03-01",
            affected_versions=">=1.0.0,<2.0.0"
        )
        
        assert vuln_create.package == "flask"
        assert vuln_create.severity == "low"
        assert vuln_create.description == "Information disclosure vulnerability"
        assert vuln_create.published_date == "2023-03-01"
        assert vuln_create.affected_versions == ">=1.0.0,<2.0.0"
    
    def test_vulnerability_create_missing_required_field(self):
        """Test that missing required fields raise validation error."""
        with pytest.raises(ValidationError):
            VulnerabilityCreate(
                package="flask",
                # Missing other required fields
            )


class TestVulnerabilityResponse:
    """Test cases for the VulnerabilityResponse model."""
    
    def test_vulnerability_response_valid(self):
        """Test creating VulnerabilityResponse with valid data."""
        vuln_response = VulnerabilityResponse(
            id="vuln-123",
            package="numpy",
            severity="critical",
            description="Remote code execution vulnerability",
            published_date="2023-04-01"
        )
        
        assert vuln_response.id == "vuln-123"
        assert vuln_response.package == "numpy"
        assert vuln_response.severity == "critical"
        assert vuln_response.description == "Remote code execution vulnerability"
        assert vuln_response.published_date == "2023-04-01"


class TestQueryRequest:
    """Test cases for the QueryRequest model."""
    
    def test_query_request_valid(self):
        """Test creating QueryRequest with valid query."""
        query_req = QueryRequest(query="What vulnerabilities exist in Django?")
        assert query_req.query == "What vulnerabilities exist in Django?"
    
    def test_query_request_empty_string(self):
        """Test QueryRequest with empty string."""
        query_req = QueryRequest(query="")
        assert query_req.query == ""
    
    def test_query_request_missing_query(self):
        """Test that missing query raises validation error."""
        with pytest.raises(ValidationError):
            QueryRequest()


class TestQueryResponse:
    """Test cases for the QueryResponse model."""
    
    def test_query_response_valid(self):
        """Test creating QueryResponse with valid data."""
        sources = [
            VulnerabilityResponse(
                id="vuln-1",
                package="requests",
                severity="high",
                description="Test vulnerability",
                published_date="2023-01-01"
            )
        ]
        
        query_resp = QueryResponse(
            response="Django has several known vulnerabilities...",
            sources=sources
        )
        
        assert query_resp.response == "Django has several known vulnerabilities..."
        assert len(query_resp.sources) == 1
        assert query_resp.sources[0].package == "requests"
    
    def test_query_response_empty_sources(self):
        """Test QueryResponse with empty sources list."""
        query_resp = QueryResponse(
            response="No vulnerabilities found.",
            sources=[]
        )
        
        assert query_resp.response == "No vulnerabilities found."
        assert query_resp.sources == []