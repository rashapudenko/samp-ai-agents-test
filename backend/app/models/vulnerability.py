from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
import uuid

class Vulnerability(BaseModel):
    """Represents a security vulnerability."""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    package: str
    severity: str
    description: str
    published_date: str
    affected_versions: Optional[str] = None
    remediation: Optional[str] = None
    created_at: datetime = Field(default_factory=datetime.now)
    
    @classmethod
    def from_dict(cls, data: dict):
        """Create a vulnerability from a dictionary."""
        return cls(**data)

class VulnerabilityCreate(BaseModel):
    """Schema for creating a vulnerability."""
    package: str
    severity: str
    description: str
    published_date: str
    affected_versions: Optional[str] = None
    remediation: Optional[str] = None

class VulnerabilityResponse(BaseModel):
    """Schema for returning a vulnerability in API responses."""
    id: str
    package: str
    severity: str
    description: str
    published_date: str
    affected_versions: Optional[str] = None
    remediation: Optional[str] = None
    
    class Config:
        from_attributes = True

class QueryRequest(BaseModel):
    """Schema for a query request."""
    query: str

class QueryResponse(BaseModel):
    """Schema for a query response."""
    response: str
    sources: List[VulnerabilityResponse]
